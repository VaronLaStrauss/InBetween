var k=Object.defineProperty,x=Object.defineProperties;var w=Object.getOwnPropertyDescriptors;var N=Object.getOwnPropertySymbols;var S=Object.prototype.hasOwnProperty,A=Object.prototype.propertyIsEnumerable;var f=(c,e,s)=>e in c?k(c,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):c[e]=s,o=(c,e)=>{for(var s in e||(e={}))S.call(e,s)&&f(c,s,e[s]);if(N)for(var s of N(e))A.call(e,s)&&f(c,s,e[s]);return c},l=(c,e)=>x(c,w(e));var h=(c,e,s)=>(f(c,typeof e!="symbol"?e+"":e,s),s);import{j as g,r as p,R,a as D}from"./vendor.244e2aff.js";const I=function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))r(a);new MutationObserver(a=>{for(const n of a)if(n.type==="childList")for(const i of n.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&r(i)}).observe(document,{childList:!0,subtree:!0});function s(a){const n={};return a.integrity&&(n.integrity=a.integrity),a.referrerpolicy&&(n.referrerPolicy=a.referrerpolicy),a.crossorigin==="use-credentials"?n.credentials="include":a.crossorigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function r(a){if(a.ep)return;a.ep=!0;const n=s(a);fetch(a.href,n)}};I();var L="/assets/table-carpet.c4b640b8.png",M="/assets/hearts.19d2fa16.png",G="/assets/diamonds.abd29111.png",O="/assets/clubs.ba75bcb1.png",$="/assets/spades.e5dc2b7b.png";const E=["hearts","diamonds","clubs","spades"],b={hearts:M,diamonds:G,clubs:O,spades:$};var j="/assets/jack-symbol.36212390.png",T="/assets/queen-crown.4feafb97.png",_="/assets/king-crown.702337fc.png",B="/assets/card-back.7f1d455e.png";const F={1:[1],2:[2],3:[3],4:[2,2],5:[2,1,2],6:[3,3],7:[3,1,3],8:[3,2,3],9:[4,1,4],10:[4,2,4],11:{name:"Jack",src:j},12:{name:"Queen",src:T},13:{name:"King",src:_}},H=B;const t=g.exports.jsx,d=g.exports.jsxs,y=g.exports.Fragment;class v extends p.exports.Component{constructor(e){super(e);h(this,"props");this.props=e}render(){const{cardNumber:e,locations:s,suit:r,turnable:a,clickCard:n,selected:i}=this.props,u=e===1?"A":e===11?"J":e===12?"Q":e===13?"K":e,m=r==="hearts"||r==="diamonds"?"red":"";return t("div",{className:"playing-card"+(a?" hoverable":" expandable")+(i===!0?" selected":""),onClick:()=>{n&&n({cardNumber:e,locations:s,suit:r})},children:d("div",{className:"card-inner",children:[t("div",{className:"card-back",children:t("img",{src:H,alt:"the back of the deck of cards"})}),t("div",{className:"card-front",children:a&&d(y,{children:[t("div",{className:"suit-container",children:d("div",{className:"symbol top-left "+m,children:[t("span",{children:u}),t("img",{src:b[r],alt:"the suite of the card"})]})}),t("div",{className:"suits",children:this.getSuitLocations(r,s)}),t("div",{className:"suit-container",children:d("div",{className:"symbol bottom-right "+m,children:[t("span",{children:u}),t("img",{src:b[r],alt:"the suite of the card"})]})})]})})]})})}getSuitLocations(e,s){if(s instanceof Array)return s.map((a,n)=>{const i=`${e}-${n}`;return t("div",{className:"suit-column",children:Array.from({length:a}).map((u,m)=>{const C=`${e}-${n}-${m}`;return t("div",{children:t("img",{src:b[e],alt:"the suite of the card"})},C)})},i)});const r=e==="hearts"||e==="diamonds"?"red":"";return t("div",{className:"suit-column",children:t("img",{src:s.src,className:r})})}}class K extends p.exports.Component{constructor(e){super(e);h(this,"rounds",5);h(this,"props");this.props=e}render(){return d("div",{className:"instructions",children:[t("div",{className:"contentMainMenu",children:d("div",{className:"backdrop",children:[t("h1",{className:"gameTitle",children:"In Between"}),d("ul",{className:"containerChoices",children:[t("li",{className:"rule",children:"The game usually has only about five (5) rounds of play, but this application will allow you to choose among 5, 10, or 17 rounds."}),t("li",{className:"rule",children:"Normally, the game would automatically and randomly draw two (2) cards from the deck, but this application allows you to choose the cards from the playing field."}),t("li",{className:"rule",children:"After drawing two (2) cards, you will choose an option depending on the cards you've chosen. After the choice has been selected, a third card will be drawn at random from the playing field. Depending on the cards you've chosen, you will either win or lose based on the numerical value of the third card compared against the numerical value of the first and second cards."}),t("li",{className:"rule",children:d("span",{children:["If: (1) the cards are not identical, (2) you chose the option",t("b",{children:"\xA0DEAL"}),", and (3) the third card's value is in between the two cards' values, you will get a point. Alternatively, you will lose a point."]})}),t("li",{className:"rule",children:d("span",{children:["If: (1) the cards are identical, (2) you chose the option",t("b",{children:"\xA0HIGHER"})," or ",t("b",{children:"\xA0LOWER"}),", and (3) the third card's value is higher/lower, respectively, than the two cards' values, you will get a point. Alternatively, you will lose a point."]})}),t("li",{className:"rule",children:d("span",{children:["Ultimately, if you chose the option ",t("b",{children:"\xA0NO DEAL"}),", you will lose half a point."]})}),d("li",{className:"rule",children:[t("label",{htmlFor:"rounds",children:"Please select the number of rounds"}),d("select",{name:"rounds",className:"form-select",onChange:this.handleSelect.bind(this),children:[t("option",{value:"5",children:"5 Rounds"}),t("option",{value:"10",children:"10 Rounds"}),t("option",{value:"17",children:"17 Rounds"})]})]})]})]})}),t("div",{className:"start",children:t("button",{className:"btn btn-primary",onClick:()=>{this.props.start(this.rounds)},children:"Start"})})]})}handleSelect(e){this.rounds=parseInt(e.target.value)}}class U extends p.exports.Component{constructor(e){super(e);h(this,"props");this.props=e}render(){const{cards:e,full:s}=this.props;return d("div",{className:"selected-cards"+(s?" full":""),children:[e.map((r,a)=>{const n=`selected-${a}`;return t(v,l(o({},r),{turnable:s}),n)}),e.length>=2&&t("div",{className:"selected-options",children:this.getActionButtons(e)})]})}getActionButtons([e,s,r]){const a=this.props.round;if(r)return t("button",{className:"btn btn-primary",onClick:this.props.nextRound,children:a===this.props.maxRound-1?"End Game":"Next Round"});const n=["No Deal"];return e.cardNumber===s.cardNumber?n.push("Higher","Lower"):n.push("Deal"),n.map((i,u)=>{const m=`${i}-${u}`;return t("button",{className:"btn btn-primary",onClick:()=>this.props.handleChoice(i),children:i},m)})}}function q(c){const e=Array.from(c.keys()),s=Math.floor(Math.random()*e.length),r=e[s],a=c.get(r),n=a[Math.floor(Math.random()*a.length)],i=F[n];return{suit:r,cardNumber:n,locations:i}}function P(c){const e=J(c),s=[];for(;e.size>0;){const r=q(e);s.push(r),e.get(r.suit).splice(e.get(r.suit).indexOf(r.cardNumber),1),e.get(r.suit).length===0&&e.delete(r.suit)}return s}function z(){return new Map(E.map(c=>[c,Array.from({length:13},(e,s)=>s+1)]))}function J(c){const e=new Map;for(const[s,r]of c)e.set(s,[...r]);return e}class Q extends p.exports.Component{constructor(e){super(e);h(this,"shuffledDeck");h(this,"usedCards");h(this,"unusedCards");h(this,"state",{round:0,score:0,selectedCards:[],maxRounds:0,endGame:!1});this.resetCounters()}render(){if(this.state.maxRounds>0){let e=!1;return d("div",{style:{backgroundImage:`url(${L})`},className:"App",children:[t("div",{className:"inGameStatus",children:d("div",{className:"inGame",children:[d("h1",{className:"inRound",children:["Round: ",this.state.round+1]}),d("h1",{className:"inScore",children:["Score: ",this.state.score]})]})}),t("div",{className:"cards-container",children:this.shuffledDeck.map((s,r)=>{const a=`field-card-${r}`;return t(v,l(o({},s),{turnable:e,clickCard:this.clickCard.bind(this,s,r),selected:this.usedCards.has(r)}),a)})}),t(U,{full:this.state.selectedCards.length>1,cards:this.state.selectedCards,handleChoice:this.handleChoice.bind(this),round:this.state.round,nextRound:this.nextRound.bind(this),maxRound:this.state.maxRounds})]})}return this.state.endGame?t("div",{className:"App",children:t("div",{className:"end-game",children:d("div",{className:"end-game-content",children:[t("h1",{className:"gameover",children:"Game Over"}),d("h2",{className:"totalscore",children:["Your score: ",this.state.score]}),t("button",{className:"btn btn-primary",onClick:this.startGame.bind(this,0),children:"Restart"})]})})}):t(y,{children:t(K,{start:this.startGame.bind(this)})})}startGame(e){this.resetCounters(),this.setState({round:0,score:0,selectedCards:[],endGame:!1,maxRounds:e})}resetCounters(){this.shuffledDeck=P(z()),this.usedCards=new Set,this.unusedCards=new Set(this.shuffledDeck.map((e,s)=>s))}nextRound(){if(this.state.maxRounds-1===this.state.round)return this.setState(l(o({},this.state),{round:0,selectedCards:[],maxRounds:0,endGame:!0}));this.setState(l(o({},this.state),{round:this.state.round+1,selectedCards:[]}))}clickCard(e,s){this.usedCards.has(s)||this.state.selectedCards.length>=2||(this.usedCards.add(s),this.unusedCards.delete(s),this.setState(l(o({},this.state),{selectedCards:[...this.state.selectedCards,e]})))}handleChoice(e){const[s,r]=this.state.selectedCards,a=this.playCard,n=[s,r,a];if(e==="No Deal")return this.setState(l(o({},this.state),{score:this.state.score-.5,selectedCards:n}));if(s.cardNumber===r.cardNumber)return a.cardNumber>s.cardNumber&&e==="Higher"||a.cardNumber<s.cardNumber&&e==="Lower"?this.setState(l(o({},this.state),{score:this.state.score+1,selectedCards:n})):this.setState(l(o({},this.state),{score:this.state.score-1,selectedCards:n}));const i=Math.min(s.cardNumber,r.cardNumber),u=Math.max(s.cardNumber,r.cardNumber);return a.cardNumber>i&&a.cardNumber<u&&e==="Deal"?this.setState(l(o({},this.state),{score:this.state.score+1,selectedCards:n})):this.setState(l(o({},this.state),{score:this.state.score-1,selectedCards:n}))}get playCard(){const e=Array.from(this.unusedCards)[Math.floor(Math.random()*this.unusedCards.size)];return this.usedCards.add(e),this.unusedCards.delete(e),this.shuffledDeck[e]}}R.render(t(D.StrictMode,{children:t(Q,{})}),document.getElementById("root"));
